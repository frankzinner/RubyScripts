<?xml version="1.0" encoding="UTF-8"?>

<project name="TOI-ALPS-MAIN" basedir="" default="cleanafterbuild">

	<!--
		Project Parameters (examples):
		API_VERSION=3.14.4.0
		API_MIN_VERSION=3.14.4.0
		APP_VERSION=3.8.20.0
		OLD_VERSION=3.8.19.0
		SVN_REVISION=1808
		SVN_REVISION_PREV=1807
		SVN_HOST=svn_dtagscrum@87.234.206.162/var/lib/subversion # not used in ant build script
		SVN_PROTO=svn+ssh # not used in ant build script
	-->

	<property environment="env"/>
     
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/../Scripts/ant-contrib-1.0b.jar"/>
		</classpath>
	</taskdef>

    <propertyregex
       property="ALPS_VERSION_X"
       input="${TAGNEW}"
       regexp="(V)(\d{1,2})-(\d{1,2})-(\d{1,2})-(\d{1,2})"
       replace="\2.\3.\4.\5"
       defaultValue="3.x.y.z"
       global="true"
       casesensitive="false"
    />

    <propertyregex
       property="ALPS_VERSION_Y"
       input="${TAGOLD}"
       regexp="(V)(\d{1,2})-(\d{1,2})-(\d{1,2})-(\d{1,2})"
       replace="\2.\3.\4.\5"
       defaultValue="3.x.y.z"
       global="true"
       casesensitive="false"
    />    
    
    <property name="API_VERSION" value="3.x.y" description="cmp api version"/>
    <property name="API_MIN_VERSION" value="3.x.y" description="cmp api min version"/>
    <property name="APP_VERSION" value="${ALPS_VERSION_X}" description="alps (app) version"/>
    <property name="OLD_VERSION" value="${ALPS_VERSION_Y}" description="old alps version"/>
    <property name="SVN_REVISION" value="0" description="svn actual revision"/>
    <property name="SVN_REVISION_PREV" value="0" description="svn previous revision"/>
    
	<propertyregex property="CVS_APP_VERSION" input="V${APP_VERSION}" regexp="\." replace="-" global="true" casesensitive="false"/>
	<propertyregex property="CVS_API_VERSION" input="V${API_VERSION}" regexp="\." replace="-" global="true" casesensitive="false"/>
	<propertyregex property="CVS_OLD_VERSION" input="V${OLD_VERSION}" regexp="\." replace="-" global="true" casesensitive="false"/>

	<property name="CVS_PACKAGE" value="TOI_ALPS_X" description="cvs package if needed for cvs build"/>
	<property name="CVS_ROOT" value="CVS" description="cvs repository uri if needed for cvs build"/>

	<property name="APP_RELEASE" value="0" description=""/>

	<property name="PACKAGE_VERSION" value="${APP_VERSION}.${SVN_REVISION}" description=""/>
	<property name="PACKAGE_NAME" value="toi-cmp-alps" description=""/>
	<property name="PACKAGE_ROOT" value="${PACKAGE_NAME}-${PACKAGE_VERSION}" description=""/>
	<property name="PACKAGE_APP_DIR" value="alps" description=""/>
	<property name="PACKAGE_SHORT" value="alps" description=""/>
	<property name="PACKAGE_RELEASE" value="${APP_RELEASE}" description=""/>
	<property name="PACKAGE_RPM_DIR" value="${basedir}" description=""/>
	<property name="PACKAGE_ARCH" value="noarch" description=""/>
	<property name="PACKAGE_TAR" value="${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.bz2" description=""/>

	<property name="PWD" value="${basedir}" description="$(shell pwd)"/>

	<property name="SVN_HOST" value="SVN_EXPORT_REVISION" description=""/>
	<property name="SVN_PACKAGE" value="TOI_ALPS_X" description=""/>
	<property name="SVN_POOL" value="tags" description=""/>
	<property name="SVN_PATH" value="${SVN_POOL}/${CVS_APP_VERSION}" description=""/>
	<property name="SVN_USER" value="svnexp" description=""/>
	<property name="SVN_PASS" value="svnexp" description=""/>
	<property name="SVN_PROTO" value="svn" description=""/>
	<property name="SVN_URI" value="${SVN_PROTO}://${SVN_HOST}/${SVN_PACKAGE}/${SVN_PATH}" description=""/>
	<property name="SVN_CHANGELOG_PATH" value="trunk" description=""/>
	<property name="SVN_CHANGELOG_URI" value="${SVN_PROTO}://${SVN_HOST}/${SVN_PACKAGE}/${SVN_CHANGELOG_PATH}" description=""/>
	<property name="SVN_EXPORT_REVISION" value="HEAD" description=""/>

	<target name="checkarguments" description="Sanitycheck (not implemented yet)">
		<echo>Usage: ant API_VERSION=${API_VERSION} API_MIN_VERSION=${API_MIN_VERSION} APP_VERSION=${APP_VERSION} OLD_VERSION=${OLD_VERSION} SVN_REVISION=${SVN_REVISION} SVN_REVISION_PREV=${SVN_REVISION_PREV}</echo>
	</target>

    <target name="writeProperties">
        <echo file="${basedir}/alps.properties" message="# Generated on build ${env.BUILD_NUMBER} for ${env.BUILD_TAG}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="API_VERSION=${API_VERSION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="API_MIN_VERSION=${API_MIN_VERSION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="API_MIN_VERSION=${API_MIN_VERSION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="APP_VERSION=${APP_VERSION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="OLD_VERSION=${OLD_VERSION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="SVN_REVISION=${SVN_REVISION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="SVN_REVISION_PREV=${SVN_REVISION_PREV}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="PACKAGE_VERSION=${APP_VERSION}.${SVN_REVISION}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="PACKAGE_NAME=${PACKAGE_NAME}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="PACKAGE_ARCH=${PACKAGE_ARCH}${line.separator}"/>
        <echo file="${basedir}/alps.properties" append="true" message="PACKAGE_TAR=${PACKAGE_TAR}${line.separator}"/>
    </target>

	<target name="cleanupbeforebuild" depends="checkarguments,writeProperties" description="Cleanup build directory">
		<echo message="Cleanup"/>
		<delete dir="${PACKAGE_ROOT}" includeemptydirs="true"/>
		<delete file="${PACKAGE_TAR}"/>
		<delete file="${PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}.${PACKAGE_ARCH}.rpm"/>
	</target>

	<target name="init" depends="cleanupbeforebuild" description="Create rpm package directory and simulate export">
		<mkdir dir="${PACKAGE_ROOT}"/>
		<copy todir="${PACKAGE_ROOT}">
			<filelist dir="${basedir}" files="init-api.php init.php version.php doxy.mainpage.php Doxyfile"/>
		</copy>
		<exec executable="cp">
			<arg value="-r"/>
			<arg path="${basedir}/CONFIG/"/>
			<arg path="${basedir}/core/"/>
			<arg path="${basedir}/htdocs/"/>
			<arg path="${basedir}/objects/"/>
			<arg path="${basedir}/services/"/>
			<arg path="${basedir}/tests/"/>
			<arg path="${basedir}/tpl/"/>
			<arg path="${basedir}/${PACKAGE_ROOT}"/>
		</exec>
		<delete>
			<fileset dir="${PACKAGE_ROOT}" includes="**/*.spec, **/**.htCnfNid" defaultexcludes="true"/>
		</delete>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s/'CMP_VERSION', '[^']*'/'CMP_VERSION', '${CVS_API_VERSION}'/g"/>
			<arg path="${PACKAGE_ROOT}/version.php"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s/'CMP_APP_VERSION', '[^']*'/'CMP_APP_VERSION', '${CVS_APP_VERSION}'/g"/>
			<arg path="${PACKAGE_ROOT}/version.php"/>
		</exec>
		<echo file="${PACKAGE_ROOT}/version" message="${CVS_APP_VERSION}${line.separator}"/>
	</target>

	<target name="prepare_spec" depends="init" description="Prepare spec file">
		<echo message="Prepare spec file ${PACKAGE_APP_DIR}"/>
		<copy file="${basedir}/RPM/${PACKAGE_NAME}.spec.in" tofile="${basedir}/${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_NAME@#${PACKAGE_NAME}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_VERSION@#${PACKAGE_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_RELEASE@#${PACKAGE_RELEASE}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_APP_DIR@#${PACKAGE_APP_DIR}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@API_VERSION@#${API_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_SHORT@#${PACKAGE_SHORT}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_PACKAGE@#${CVS_PACKAGE}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_ROOT@#${CVS_ROOT}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_API_VERSION@#${CVS_API_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_APP_VERSION@#${CVS_APP_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_OLD_VERSION@#${CVS_OLD_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_ARCH@#${PACKAGE_ARCH}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@API_MIN_VERSION@#${API_MIN_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_SHORT@#${PACKAGE_SHORT}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
	</target>

	<target name="prepare_rpm" depends="prepare_spec" description="Prepare build of rpm">
		<echo message="Prepare build of RPM"/>
		<copy todir="${PACKAGE_ROOT}/RPM" preservelastmodified="true">
			<fileset dir="${basedir}/RPM" excludes="**/*.svn"/>
		</copy>
		<delete file="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec.in"/>
		<tar destfile="${basedir}/${PACKAGE_TAR}" compression="bzip2" followsymlinks="true" longfile="warn">
			<tarfileset prefix="${PACKAGE_ROOT}" dir="${basedir}/${PACKAGE_ROOT}" defaultexcludes="true" group="root" username="root">
					<exclude name="build.xml"/>
					<exclude name="Makefile"/>
			</tarfileset>
		</tar>
	</target>

	<target name="rpm_build" depends="prepare_rpm" description="Finally builds the rpm">
		<echo message="Build the RPM package"/>
		<!-- needs update to rpmbuild only -->
		<exec executable="/usr/bin/rpmbuild" failonerror="true">
			<arg value="-tb" />
			<arg value="--target" />
			<arg value="${PACKAGE_ARCH}" />
			<arg value="${PACKAGE_TAR}" />
		</exec>
		<move file="/usr/src/packages/RPMS/${PACKAGE_ARCH}/${PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}.${PACKAGE_ARCH}.rpm" todir="${basedir}" failonerror="true"/>
	</target>

	<target name="evaluateChecksums">
		<checksum file="${basedir}/${PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}.${PACKAGE_ARCH}.rpm" algorithm="MD5" fileext="md5" forceoverwrite="yes"/>
	</target>

	<target name="cleanafterbuild" depends="rpm_build,evaluateChecksums" description="Cleaning up after build">
		<echo message="Cleanup the build"/>
		<delete dir="${PACKAGE_ROOT}" includeemptydirs="true"/>
		<delete file="${PACKAGE_TAR}"/>
	</target>

</project>

