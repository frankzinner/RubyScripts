<?xml version="1.0" encoding="UTF-8"?>

<project name="TOI-CMP-MAIN" basedir="" default="cleanafterbuild">

	<!--
		Project Parameters (examples):
		API_VERSION=3.14.4.0
		OLD_VERSION=3.14.3.0
		SVN_REVISION=6107
		SVN_REVISION_PREV=6099
		SVN_HOST=svn_dtagscrum@87.234.206.162/var/lib/subversion # not used in ant build script
		SVN_PROTO=svn+ssh # not used in ant build script
	-->

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="/data/app/coin/workspace/Scripts/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<property name="API_VERSION" value="3.14.23" description="cmp api version"/>
	<property name="API_MIN_VERSION" value="3.14.23" description="cmp api min version"/>
	<property name="APP_VERSION" value="3.8.20.0" description="alps (=app) version"/>
	<property name="OLD_VERSION" value="3.8.19.0" description="old alps version"/>
	<property name="SVN_REVISION" value="1808" description="svn actual revision"/>
	<property name="SVN_REVISION_PREV" value="1807" description="svn previous revision"/>

	<propertyregex property="CVS_APP_VERSION" input="V${APP_VERSION}" regexp="\." replace="-" global="true" casesensitive="false"/>
	<propertyregex property="CVS_API_VERSION" input="V${API_VERSION}" regexp="\." replace="-" global="true" casesensitive="false"/>
	<propertyregex property="CVS_OLD_VERSION" input="V${OLD_VERSION}" regexp="\." replace="-" global="true" casesensitive="false"/>

	<property name="CVS_PACKAGE" value="TOI_CMP" description="cvs package if needed for cvs build"/>
	<property name="CVS_ROOT" value="CVS" description="cvs repository uri if needed for cvs build"/>

	<property name="APP_RELEASE" value="0" description=""/>

	<property name="PACKAGE_VERSION" value="${APP_VERSION}.${SVN_REVISION}" description=""/>
	<property name="PACKAGE_REQUIRES" value="toi-cmp-base-php5 >= 5.3.7, funphp5-tdb-cmp >= 5.3.7, e2fsprogs, dtag-cmp-g10runner"/>
	<property name="PACKAGE_NAME" value="toi-cmp-api" description=""/>
	<property name="PACKAGE_ROOT" value="${PACKAGE_NAME}-${PACKAGE_VERSION}" description=""/>
	<property name="PACKAGE_APP_DIR" value="${PACKAGE_NAME}" description=""/>
	<property name="PACKAGE_RELEASE" value="${APP_RELEASE}" description=""/>
	<property name="PACKAGE_ARCH" value="noarch" description=""/>
	<property name="PACKAGE_TAR" value="${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.bz2" description=""/>

	<property name="SVN_HOST" value="SVN_EXPORT_REVISION" description=""/>
	<property name="SVN_PACKAGE" value="TOI_CMP" description=""/>
	<property name="SVN_POOL" value="tags" description=""/>
	<property name="SVN_PATH" value="${SVN_POOL}/${CVS_APP_VERSION}" description=""/>
	<property name="SVN_USER" value="svnexp" description=""/>
	<property name="SVN_PASS" value="svnexp" description=""/>
	<property name="SVN_PROTO" value="svn" description=""/>
	<property name="SVN_URI" value="${SVN_PROTO}://${SVN_HOST}/${SVN_PACKAGE}/${SVN_PATH}" description=""/>
	<property name="SVN_CHANGELOG_PATH" value="trunk" description=""/>
	<property name="SVN_CHANGELOG_URI" value="${SVN_PROTO}://${SVN_HOST}/${SVN_PACKAGE}/${SVN_CHANGELOG_PATH}" description=""/>
	<property name="SVN_EXPORT_REVISION" value="HEAD" description=""/>

	<target name="checkarguments" description="Sanitycheck (not implemented yet)">
		<echo>Usage: make/ant API_VERSION=version OLD_VERSION=version SVN_REVISION=revision SVN_REVISION_PREV=revision</echo>
	</target>

	<target name="cleanupbeforebuild" depends="checkarguments" description="Cleanup build directory">
		<echo message="Cleanup"/>
		<delete dir="${PACKAGE_ROOT}" includeemptydirs="true"/>
		<delete file="${PACKAGE_TAR}"/>
		<delete file="${PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}.${PACKAGE_ARCH}.rpm"/>
	</target>

	<target name="init" depends="cleanupbeforebuild" description="Create rpm package directory and simulate export">
		<mkdir dir="${PACKAGE_ROOT}"/>
		<copy todir="${PACKAGE_ROOT}">
			<filelist dir="${basedir}" files="init.php core.php doxy.mainpage.php Doxyfile changes.ipvans.log"/>
		</copy>
		<exec executable="cp">
			<arg value="-r"/>
			<arg path="${basedir}/CONFIG/"/>
			<arg path="${basedir}/CORE/"/>
			<arg path="${basedir}/doc/"/>
			<arg path="${basedir}/LIB/"/>
			<arg path="${basedir}/mocks/"/>
			<arg path="${basedir}/PLUGINS/"/>
			<arg path="${basedir}/RPM/"/>
			<arg path="${basedir}/TEMPLATING/"/>
			<arg path="${basedir}/${PACKAGE_ROOT}"/>
		</exec>
		<delete>
			<fileset dir="${PACKAGE_ROOT}" includes="**/*.spec **/*.svn" defaultexcludes="true"/>
		</delete>
		<delete file="${PACKAGE_ROOT}/Makefile"/>
		<delete file="${PACKAGE_ROOT}/build.xml"/>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s/'CMP_VERSION', '[^']*'/'CMP_VERSION', '${CVS_API_VERSION}'/g"/>
			<arg path="${PACKAGE_ROOT}/init.php"/>
		</exec>
		<!-- # Temporary fix for different path to imagemagick's convert program (remove for #SLES11 !!!) -->
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#^define('CMP_API_IMAGEMAGICK_BINARY_CONVERT', '/usr/bin/convert');#define('CMP_API_IMAGEMAGICK_BINARY_CONVERT', '/usr/local/imagemagick/6.x/bin/convert');#g"/>
			<arg path="${PACKAGE_ROOT}/CONFIG/env_produktion.ini"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#^define('CMP_API_IMAGEMAGICK_BINARY_CONVERT', '/usr/bin/convert');#define('CMP_API_IMAGEMAGICK_BINARY_CONVERT', '/usr/local/imagemagick/6.x/bin/convert');#g"/>
			<arg path="${PACKAGE_ROOT}/CONFIG/env_versul.ini"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#^define('CMP_API_IMAGEMAGICK_BINARY_CONVERT', '/usr/bin/convert');#define('CMP_API_IMAGEMAGICK_BINARY_CONVERT', '/usr/local/imagemagick/6.x/bin/convert');#g"/>
			<arg path="${PACKAGE_ROOT}/CONFIG/env_entwicklung.ini"/>
		</exec>
		<echo file="${PACKAGE_ROOT}/version" message="${CVS_API_VERSION}${line.separator}"/>
	</target>

	<target name="prepare_spec" depends="init" description="Prepare spec file">
		<echo message="Prepare spec file ${PACKAGE_APP_DIR}"/>
		<copy file="${basedir}/RPM/${PACKAGE_NAME}.spec.in" tofile="${basedir}/${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_ROOT@#${CVS_ROOT}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@API_VERSION@#${API_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_PACKAGE@#${CVS_PACKAGE}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_API_VERSION@#${CVS_API_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@CVS_OLD_VERSION@#${CVS_OLD_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_NAME@#${PACKAGE_NAME}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_VERSION@#${PACKAGE_VERSION}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_RELEASE@#${PACKAGE_RELEASE}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_ARCH@#${PACKAGE_ARCH}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
		<exec executable="sed">
			<arg value="-i"/>
			<arg value="-e"/>
			<arg value="s#@PACKAGE_REQUIRES@#${PACKAGE_REQUIRES}#g"/>
			<arg path="${PACKAGE_ROOT}/${PACKAGE_NAME}.spec"/>
		</exec>
	</target>

	<target name="prepare_rpm" depends="prepare_spec" description="Prepare build of rpm">
		<echo message="Prepare build of RPM"/>
		<copy todir="${PACKAGE_ROOT}" preservelastmodified="true">
			<fileset dir="${basedir}/RPM/" excludes="**/*.svn"/>
		</copy>
		<delete>
			<fileset dir="${PACKAGE_ROOT}" includes="**/*.svn"/>
		</delete>
		<tar destfile="${basedir}/${PACKAGE_TAR}" compression="bzip2" followsymlinks="true" longfile="warn">
			<tarfileset prefix="${PACKAGE_ROOT}" dir="${basedir}/${PACKAGE_ROOT}" defaultexcludes="true" group="root" username="root">
				<exclude name="build.xml"/>
				<exclude name="Makefile"/>
			</tarfileset>
		</tar>
	</target>

	<target name="rpm_build" depends="prepare_rpm" description="Finally builds the rpm">
		<echo message="Build the RPM package"/>
		<!-- needs update to rpmbuild only -->
		<exec executable="/usr/bin/rpmbuild" failonerror="true">
			<arg value="-tb" />
			<arg value="--target" />
			<arg value="${PACKAGE_ARCH}" />
			<arg value="${PACKAGE_TAR}" />
		</exec>
		<!-- move file="/opt/local/src/macports/RPMS/${PACKAGE_ARCH}/${PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}.${PACKAGE_ARCH}.rpm" todir="${basedir}" failonerror="true"/ -->
		<move file="/usr/src/packages/RPMS/${PACKAGE_ARCH}/${PACKAGE_NAME}-${PACKAGE_VERSION}-${PACKAGE_RELEASE}.${PACKAGE_ARCH}.rpm" todir="${basedir}" failonerror="true"/>
	</target>

	<target name="cleanafterbuild" depends="rpm_build" description="Cleaning up after build">
		<echo message="Cleanup the build"/>
		<delete dir="${PACKAGE_ROOT}" includeemptydirs="true"/>
		<delete file="${PACKAGE_TAR}"/>
	</target>

</project>
